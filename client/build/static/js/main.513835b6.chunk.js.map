{"version":3,"sources":["Password.js","Viewer.js","Select.js","Router.js","AuthContext.js","serviceWorker.js","index.js"],"names":["Universe","styled","Box","Galaxy","Flex","PassEntry","Password","useState","input","setInput","setData","useContext","SetData","authed","Authed","setAuthed","SetAuthed","jwt","Jwt","history","useHistory","getAuth","a","config","method","url","data","password","type","withCredentials","axios","result","alert","current","headers","authorization","useEffect","push","backgroundColor","color","fontSize","fontFamily","mb","id","value","onChange","e","target","placeholder","justifyContent","mt","bg","onClick","Panel","App","lookup","Lookup","console","log","Data","setLabLookup","SetLabLookup","loaded","setLoaded","redirectURL","useRef","onSelect","lab","filter","title","node","Object","keys","nodes","db","defaultValue","key","map","i","AuthRouter","exact","path","ProtectedRoute","children","rest","render","location","to","pathname","state","from","React","createContext","Boolean","window","hostname","match","ReactDOM","setLookup","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+uBAcA,IAAMA,EAAWC,kBAAOC,MAAPD,CAAH,KAIRE,EAASF,kBAAOG,OAAPH,CAAH,KAMNI,EAAYJ,kBAAOG,OAAPH,CAAH,KAWA,SAASK,IAAY,IAAD,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAE3BC,EAAUC,qBAAWC,GACrBC,EAASF,qBAAWG,GACpBC,EAAYJ,qBAAWK,GACvBC,EAAMN,qBAAWO,GACjBC,EAAUC,cAEVC,EAAO,uCAAG,8BAAAC,EAAA,6DACRC,EAAS,CACbC,OAAQ,OACRC,IAAI,YACJC,KAAM,CAACC,SAAUnB,GACjBoB,KAAM,mBACNC,iBAAiB,GANL,kBASSC,IAAMP,GATf,QASNQ,EATM,QAUAL,MACVM,MAAM,yCAERf,EAAIgB,QAAUF,EAAOG,QAAQC,cAC7BzB,EAAQqB,EAAOL,KAAKA,MACpBX,EAAUgB,EAAOL,KAAKb,QAfV,kDAiBZmB,MAAM,EAAD,IAjBO,0DAAH,qDA2Bb,OANAI,qBAAU,WACJvB,GACFM,EAAQkB,KAAK,UAEd,CAACxB,EAAQM,IAGV,kBAACnB,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,CAAWiC,gBAAgB,SACzB,kBAAC,MAAD,KACE,kBAAC,UAAD,CAASC,MAAM,UAAUC,SAAU,EAAGC,WAAW,aAAaC,GAAG,QAAjE,kCAGA,kBAAC,IAAD,CACEC,GAAG,WACHC,MAAOpC,EACPqC,SAAU,SAAAC,GAAC,OAAIrC,EAASqC,EAAEC,OAAOH,QACjCI,YAAY,WACZT,MAAM,UAEV,kBAAC,OAAD,CAAMU,eAAe,SAASC,GAAG,QAC7B,kBAAC,MAAD,KACE,kBAAC,SAAD,CAAQC,GAAG,UAAUZ,MAAM,QAAQa,QAAS/B,GAA5C,a,idC7EhB,IAAMrB,EAAWC,kBAAOC,MAAPD,CAAH,KAIRE,EAASF,kBAAOG,OAAPH,CAAH,KAMNoD,EAAQpD,kBAAOG,OAAPH,CAAH,KAWI,SAASqD,IACtB,IAAMC,EAAS5C,qBAAW6C,GAG1B,OAFAC,QAAQC,IAAIH,GAGV,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAACF,EAAD,CAAOf,gBAAgB,SACrB,kBAAC,MAAD,KACE,kBAAC,UAAD,CAASC,MAAM,UAAUC,SAAU,EAAGC,WAAW,aAAaC,GAAG,QAAjE,0C,idC5BZ,IAAM1C,EAAWC,kBAAOC,MAAPD,CAAH,KAIRE,EAASF,kBAAOG,OAAPH,CAAH,KAMNoD,EAAQpD,kBAAOG,OAAPH,CAAH,KAWI,SAASqD,IACtB,IAAMrC,EAAMN,qBAAWO,GACjBQ,EAAOf,qBAAWgD,GAClBC,EAAejD,qBAAWkD,GAHJ,EAIAtD,oBAAS,GAJT,mBAIrBuD,EAJqB,KAIbC,EAJa,KAKtBC,EAAcC,mBACd9C,EAAUC,cAEV8C,EAAQ,uCAAG,WAAOpB,GAAP,qBAAAxB,EAAA,6DACT6C,EAAMzC,EAAK0C,QAAQ,SAAAD,GAAG,OAAIA,EAAIE,QAAUvB,EAAEC,OAAOH,SAAO,GACxD0B,EAAOC,OAAOC,KAAKL,EAAIM,OAAO,GACpCT,EAAY/B,QAAZ,eAA8BkC,EAAIE,MAAlC,YAA2CC,GAErC/C,EAAS,CACbC,OAAQ,OACRC,IAAI,YACJC,KAAM,CAACyC,IAAKA,EAAIE,OAChBzC,KAAM,mBACNC,iBAAiB,EACjBK,QAAS,CACPC,cAAelB,EAAIgB,UAZR,kBAgBQH,IAAMP,GAhBd,QAgBPQ,EAhBO,QAiBDL,MACVM,MAAM,qCAER4B,EAAa7B,EAAOL,KAAKgD,IACzBX,GAAU,GArBG,kDAuBb/B,MAAM,EAAD,IAvBQ,0DAAH,sDAkCd,OANAI,qBAAU,WACJ0B,GACF3C,EAAQkB,KAAK2B,EAAY/B,WAE1B,CAAC6B,EAAQ3C,IAGV,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOmB,gBAAgB,SACrB,kBAAC,MAAD,KACE,kBAAC,UAAD,CAASC,MAAM,UAAUC,SAAU,EAAGC,WAAW,aAAaC,GAAG,QAAjE,wBAGA,kBAAC,IAAD,CACEC,GAAG,MACHE,SAAUqB,EACVS,aAAa,QACbpC,MAAM,SAEN,4BACEqC,IAAK,GADP,SAICL,OAAOC,KAAK9C,GAAMmD,KAAI,SAACV,EAAKW,GAAN,OACrB,4BACEF,IAAKE,EAAE,GACNpD,EAAKyC,GAAKE,eCnFd,SAASU,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC3E,EAAD,OAEF,kBAAC4E,EAAD,CAAgBF,OAAK,EAACC,KAAK,QACzB,kBAAC,EAAD,OAEF,kBAACC,EAAD,CAAgBD,KAAK,qBACnB,kBAAC,EAAD,SAQH,SAASC,EAAT,GAAgD,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,4BAC9CvE,EAASF,qBAAWG,GAC1B,OACE,kBAAC,IAAD,iBACMsE,EADN,CAEEC,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACNzE,EACEsE,EAEA,kBAAC,IAAD,CACEI,GAAI,CACFC,SAAU,IACVC,MAAO,CAAEC,KAAMJ,UCzCtB,IAAMxE,EAAS6E,IAAMC,gBACf5E,EAAY2E,IAAMC,gBAClB1E,EAAMyE,IAAMC,gBACZjC,EAAOgC,IAAMC,gBACbhF,EAAU+E,IAAMC,gBAChB/B,EAAe8B,IAAMC,gBACrBpC,EAASmC,IAAMC,gBCGRC,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCbNC,IAASZ,OAAO,mBFOD,WAAwB,IAAD,EACR9E,oBAAS,GADD,mBAC7BM,EAD6B,KACrBE,EADqB,OAEZR,qBAFY,mBAE7BmB,EAF6B,KAEvBhB,EAFuB,OAGRH,qBAHQ,mBAG7BgD,EAH6B,KAGrB2C,EAHqB,KAI9BjF,EAAMgD,mBAEZ,OACE,kBAACnD,EAAOqF,SAAR,CAAiBvD,MAAO/B,GACtB,kBAACG,EAAUmF,SAAX,CAAoBvD,MAAO7B,GACzB,kBAACG,EAAIiF,SAAL,CAAcvD,MAAO3B,GACnB,kBAAC0C,EAAKwC,SAAN,CAAevD,MAAOlB,GACpB,kBAACd,EAAQuF,SAAT,CAAkBvD,MAAOlC,GACvB,kBAACmD,EAAasC,SAAd,CAAuBvD,MAAOsD,GAC5B,kBAAC1C,EAAO2C,SAAR,CAAiBvD,MAAOW,GACtB,kBAACwB,EAAD,eErBF,MAAiBqB,SAASC,eAAe,SD8HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.513835b6.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react'\nimport {\n  Box,\n  Flex,\n  Heading,\n  Button\n} from 'rebass/styled-components'\nimport { Input } from '@rebass/forms'\nimport styled from 'styled-components'\nimport axios from 'axios'\nimport { useHistory } from 'react-router-dom'\nimport { Authed, SetAuthed, Jwt, SetData } from './AuthContext'\n\n\nconst Universe = styled(Box)`\n  height: 100%;\n`\n\nconst Galaxy = styled(Flex)`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PassEntry = styled(Flex)`\n  border: 5px solid black;\n  border-radius: 10px;\n  position: fixed;\n  min-height: 300px;\n  min-width: 600px;\n  justify-content: center;\n  padding-top: 75px;\n`\n\n\nexport default function Password() {\n  const [input, setInput] = useState('')\n  const setData = useContext(SetData)\n  const authed = useContext(Authed)\n  const setAuthed = useContext(SetAuthed)\n  const jwt = useContext(Jwt)\n  const history = useHistory()\n\n  const getAuth = async () => {\n    const config = {\n      method: 'post',\n      url:'/api/auth',\n      data: {password: input},\n      type: 'application/json',\n      withCredentials: true,\n    }\n    try {\n      const result = await axios(config)\n      if (!result.data) {\n        alert('Incorrect password. Please try again.')\n      }\n      jwt.current = result.headers.authorization\n      setData(result.data.data)\n      setAuthed(result.data.authed)\n    } catch (err) {\n      alert(err)\n    }\n  }\n\n  useEffect(() => {\n    if (authed) {\n      history.push('/lab')\n    }\n  }, [authed, history])\n\n  return (\n    <Universe>\n      <Galaxy>\n        <PassEntry backgroundColor='black'>\n          <Box>\n            <Heading color='#61dafb' fontSize={4} fontFamily='sans-serif' mb='10px'>\n              Enter the password to continue\n            </Heading>\n            <Input\n              id='password'\n              value={input}\n              onChange={e => setInput(e.target.value)}\n              placeholder='password'\n              color='white'\n            />\n          <Flex justifyContent='center' mt='10px'>\n              <Box>\n                <Button bg='#61dafb' color='white' onClick={getAuth}>\n                  Go!\n                </Button>\n              </Box>\n            </Flex>\n          </Box>\n        </PassEntry>\n      </Galaxy>\n    </Universe>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Lookup } from './AuthContext'\nimport {\n  Box,\n  Flex,\n  Heading,\n} from 'rebass/styled-components'\nimport styled from 'styled-components'\nimport { useHistory, useParams } from 'react-router-dom'\n\nconst Universe = styled(Box)`\n  height: 100%;\n`\n\nconst Galaxy = styled(Flex)`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Panel = styled(Flex)`\n  border: 5px solid black;\n  border-radius: 10px;\n  position: fixed;\n  min-height: 300px;\n  min-width: 600px;\n  justify-content: center;\n  padding-top: 75px;\n`\n\n\nexport default function App() {\n  const lookup = useContext(Lookup)\n  console.log(lookup)\n\n  return (\n    <Universe>\n      <Galaxy>\n        <Panel backgroundColor='black'>\n          <Box>\n            <Heading color='#61dafb' fontSize={4} fontFamily='sans-serif' mb='10px'>\n              Success! Here we'd show the lab...\n            </Heading>\n          </Box>\n        </Panel>\n      </Galaxy>\n    </Universe>\n  )\n}\n","import React, { useContext, useState, useEffect, useRef } from 'react'\nimport { Jwt, Data, SetLabLookup } from './AuthContext'\nimport {\n  Box,\n  Flex,\n  Heading,\n} from 'rebass/styled-components'\nimport { Select } from '@rebass/forms'\nimport styled from 'styled-components'\nimport axios from 'axios'\nimport { useHistory, useParams } from 'react-router-dom'\n\nconst Universe = styled(Box)`\n  height: 100%;\n`\n\nconst Galaxy = styled(Flex)`\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Panel = styled(Flex)`\n  border: 5px solid black;\n  border-radius: 10px;\n  position: fixed;\n  min-height: 300px;\n  min-width: 600px;\n  justify-content: center;\n  padding-top: 75px;\n`\n\n\nexport default function App() {\n  const jwt = useContext(Jwt)\n  const data = useContext(Data)\n  const setLabLookup = useContext(SetLabLookup)\n  const [loaded, setLoaded] = useState(false)\n  const redirectURL = useRef()\n  const history = useHistory()\n\n  const onSelect = async (e) => {\n    const lab = data.filter( lab => lab.title === e.target.value)[0]\n    const node = Object.keys(lab.nodes)[0]\n    redirectURL.current = `/lab/${lab.title}/${node}`\n\n    const config = {\n      method: 'post',\n      url:'/api/load',\n      data: {lab: lab.title},\n      type: 'application/json',\n      withCredentials: true,\n      headers: {\n        authorization: jwt.current\n      }\n    }\n    try {\n      const result = await axios(config)\n      if (!result.data) {\n        alert('Failed to load. Please try again.')\n      }\n      setLabLookup(result.data.db)\n      setLoaded(true)\n    } catch (err) {\n      alert(err)\n    }\n\n  }\n\n  useEffect(() => {\n    if (loaded) {\n      history.push(redirectURL.current)\n    }\n  }, [loaded, history])\n\n  return (\n    <Universe>\n      <Galaxy>\n        <Panel backgroundColor='black'>\n          <Box>\n            <Heading color='#61dafb' fontSize={4} fontFamily='sans-serif' mb='10px'>\n              Choose a Lab to view\n            </Heading>\n            <Select\n              id='lab'\n              onChange={onSelect}\n              defaultValue='-----'\n              color='white'\n            >\n              <option\n                key={0}>\n                -----\n              </option>\n              {Object.keys(data).map((lab, i) => (\n                <option\n                  key={i+1}>\n                  {data[lab].title}\n                </option>\n              ))}\n            </Select>\n          </Box>\n        </Panel>\n      </Galaxy>\n    </Universe>\n  )\n}\n","import React, { useContext } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\nimport Password from './Password'\nimport Viewer from './Viewer'\nimport Select from './Select'\nimport { Authed } from './AuthContext'\n\n\nexport default function AuthRouter() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/'>\n          <Password />\n        </Route>\n        <ProtectedRoute exact path='/lab'>\n          <Select />\n        </ProtectedRoute>\n        <ProtectedRoute path='/lab/:title/:node'>\n          <Viewer />\n        </ProtectedRoute>\n      </Switch>\n    </Router>\n  )\n}\n\n\nexport function ProtectedRoute({ children, ...rest }) {\n  const authed = useContext(Authed)\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        authed ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  )\n}\n","import React, { useState, useRef } from 'react'\nimport AuthRouter from './Router'\n\nexport const Authed = React.createContext()\nexport const SetAuthed = React.createContext()\nexport const Jwt = React.createContext()\nexport const Data = React.createContext()\nexport const SetData = React.createContext()\nexport const SetLabLookup = React.createContext()\nexport const Lookup = React.createContext()\n\n\nexport default function AuthContext() {\n  const [authed, setAuthed] = useState(false)\n  const [data, setData] = useState()\n  const [lookup, setLookup] = useState()\n  const jwt = useRef()\n\n  return (\n    <Authed.Provider value={authed}>\n      <SetAuthed.Provider value={setAuthed}>\n        <Jwt.Provider value={jwt}>\n          <Data.Provider value={data}>\n            <SetData.Provider value={setData}>\n              <SetLabLookup.Provider value={setLookup}>\n                <Lookup.Provider value={lookup}>\n                  <AuthRouter />\n                </Lookup.Provider>\n              </SetLabLookup.Provider>\n            </SetData.Provider>\n          </Data.Provider>\n        </Jwt.Provider>\n      </SetAuthed.Provider>\n    </Authed.Provider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AuthContext from './AuthContext'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<AuthContext />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}